@charset "UTF-8";
//元素排列方向
// flex-direction : [row | row-reverse | column | column-reverse]
// flex-direction:row （横向从左到右排列==左对齐）
// flex-direction:row-reverse （与row 相反）
// flex-direction:column （从上往下排列==顶对齐）
// flex-direction:column-reverse （与column 相反）
//内容一行容不下的时候才有效
// flex-wrap : [nowrap | wrap | wrap-reverse]
// flex-wrap:nowrap （超出不换行，很奇怪里面的宽度会变成100%）
// flex-wrap:wrap （超出按父级的高度平分）
// flex-wrap:wrap-reverse（与wrap 相反）
//水平对齐方式
// justify-content : [flex-start | flex-end | space-between | space-around]
// justify-content :flex-start （水平左对齐）
// justify-content:flex-end; （水平右对齐）
// justify-content:center; （水平居中对齐）
// justify-content:space-between; （两端对齐）
// justify-content:space-around; （两端间距对其）
//align-items垂直对齐方式
// align-items : [stretch | flex-end | center | baseline]
//align-items:stretch; （默认）
//align-items:flex-start; （上对齐，和默认差不多）
//align-items:flex-end; （下对齐）
//align-items:center;（居中对齐）
//align-items:baseline; （基线对齐）
//align-content属性在弹性容器内的各项没有占用交叉轴上所有可用的空间时对齐容器内的各项（垂直）
// align-content : [stretch | flex-end | center | space-between | space-around]
//align-content:stretch; （默认）
//align-content:flex-start; （元素被拉伸以适应容器）
//align-content:flex-end; （元素位于容器的结尾）
//align-content:center;（元素位于容器的中心。）
//align-content:space-between; （元素位于各行之间留有空白的容器内。）
//align-content:space-around; （元素位于各行之前、之间、之后都留有空白的容器内。）
//align-self属性定义flex子项单独在侧轴（纵轴）方向上的对齐方式
// align-self : [auto | stretch | flex-end | center | baseline]
//align-self:auto;（元素继承了它的父容器的 align-items 属性。如果没有父容器则为 "stretch"）
//align-self:stretch; （元素被拉伸以适应容器）
//align-self:flex-start; （	元素位于容器的开头）
//align-self:flex-end; （元素位于容器的结尾）
//align-self:center;（元素位于容器的中心）
//align-self:baseline; （元素位于容器的基线上）
@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {
    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    .flex#{$infix}-row            { flex-direction: row !important; }
    .flex#{$infix}-column         { flex-direction: column !important; }
    .flex#{$infix}-row-reverse    { flex-direction: row-reverse !important; }
    .flex#{$infix}-column-reverse { flex-direction: column-reverse !important; }

    .flex#{$infix}-wrap         { flex-wrap: wrap !important; }
    .flex#{$infix}-nowrap       { flex-wrap: nowrap !important; }
    .flex#{$infix}-wrap-reverse { flex-wrap: wrap-reverse !important; }

    .justify-content#{$infix}-start   { justify-content: flex-start !important; }
    .justify-content#{$infix}-end     { justify-content: flex-end !important; }
    .justify-content#{$infix}-center  { justify-content: center !important; }
    .justify-content#{$infix}-between { justify-content: space-between !important; }
    .justify-content#{$infix}-around  { justify-content: space-around !important; }

    .align-items#{$infix}-start    { align-items: flex-start !important; }
    .align-items#{$infix}-end      { align-items: flex-end !important; }
    .align-items#{$infix}-center   { align-items: center !important; }
    .align-items#{$infix}-baseline { align-items: baseline !important; }
    .align-items#{$infix}-stretch  { align-items: stretch !important; }

    .align-content#{$infix}-start   { align-content: flex-start !important; }
    .align-content#{$infix}-end     { align-content: flex-end !important; }
    .align-content#{$infix}-center  { align-content: center !important; }
    .align-content#{$infix}-between { align-content: space-between !important; }
    .align-content#{$infix}-around  { align-content: space-around !important; }
    .align-content#{$infix}-stretch { align-content: stretch !important; }

    .align-self#{$infix}-auto     { align-self: auto !important; }
    .align-self#{$infix}-start    { align-self: flex-start !important; }
    .align-self#{$infix}-end      { align-self: flex-end !important; }
    .align-self#{$infix}-center   { align-self: center !important; }
    .align-self#{$infix}-baseline { align-self: baseline !important; }
    .align-self#{$infix}-stretch  { align-self: stretch !important; }
  }
}
